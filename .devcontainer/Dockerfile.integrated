# Phase 1 MCP 보안 교육 - 간소화된 통합 환경
# 기존 Dockerfile을 기반으로 최소한의 보안 실습 도구만 추가

# 아래는 Microsoft가 제공하는 Dev Container 전용 이미지로 다음 장점이 있습니다:
# - VSCode Dev Container에 최적화된 설정 (git, curl, sudo 등 기본 도구 포함)
# - vscode 사용자가 미리 생성되어 있음 (UID 1000)
# - Python 3.11 버전 설치됨
# - Debian Bullseye 기반으로 안정성이 높음
# - Dev Container 기능(포트 포워딩, 파일 감시 등)이 사전 구성됨
FROM mcr.microsoft.com/devcontainers/python:3.11-bullseye

# Python의 출력 버퍼링을 비활성화하는 환경 변수를 설정합니다.
# - 버퍼링이 켜져있으면 print() 출력이 즉시 표시되지 않고 버퍼에 쌓였다가 나중에 표시됨
# - 컨테이너 환경에서는 실시간 로그 확인이 중요하므로 버퍼링을 끔
# - 디버깅 시 print 문이 즉시 보이게 하여 문제 파악이 쉬워짐
ENV PYTHONUNBUFFERED=1

# 1. 필수 보안 실습 도구만 설치 (최소화)
RUN sudo apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && sudo apt-get -y install --no-install-recommends \
    # 기존 도구 유지
    git docker.io \
    # 보안 실습 필수 도구만 추가
    curl jq \
    # 간단한 공격 시뮬레이션용
    nmap \
    && sudo usermod -aG docker vscode \
    && sudo apt-get clean \
    && sudo rm -rf /var/lib/apt/lists/*

# 2. Python 패키지 설치 (기존 + 보안 실습 필수)
RUN pip install --no-cache-dir \
    # 기존 패키지
    fastapi==0.116.1 \
    uvicorn==0.35.0 \
    httpx==0.28.1 \
    pydantic==2.11.7 \
    python-dotenv==1.1.1 \
    fastmcp==2.11.2 \
    # 보안 실습 필수 패키지만 추가
    PyJWT==2.8.0 \
    python-json-logger==2.0.7 \
    aiohttp==3.9.1 \
    pytest==8.4.2

# 3. nvm과 Node.js 설치
# nvm 설치를 위한 환경 설정
ENV NVM_DIR="/home/vscode/.nvm"
ENV NODE_VERSION="22"

# vscode 사용자로 nvm 및 Node.js 설치
USER vscode
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash && \
    . "$NVM_DIR/nvm.sh" && \
    nvm install $NODE_VERSION && \
    nvm alias default $NODE_VERSION && \
    nvm use default

# PATH에 Node.js 추가
ENV PATH="$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH"

# 4. uv (Python package manager) 설치
USER vscode
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/home/vscode/.cargo/bin:$PATH"

# root로 돌아가서 나머지 설정 수행
USER root

# 5. 작업 디렉토리 설정
WORKDIR /workspaces/fastcampus

# 6. 포트 노출
# EXPOSE는 문서화 목적입니다. 실제로 포트를 열지는 않습니다.
# - EXPOSE: "이 컨테이너는 8080 포트를 사용할 예정"이라고 알려주는 메타데이터
# - devcontainer.json의 forwardPorts: 실제로 호스트와 컨테이너 간 포트를 연결
# - EXPOSE가 없어도 포트 포워딩은 작동하지만, 이미지 사용자에게 어떤 포트를 쓰는지 알려주는 역할
EXPOSE 8080

# 7. 기본 명령어
CMD ["sleep", "infinity"]