# -*- coding: utf-8 -*-
"""
이 모듈은 mcp_server.py에 정의된 파일 시스템 API 툴들을 테스트합니다.
임시 테스트 디렉터리를 설정하고, 각 툴(list_dir, read, write, replace)의
기능을 순차적으로 검증한 후, 생성된 테스트 환경을 정리합니다.
"""

import asyncio
import os
import shutil
import pathlib
import json
from fastmcp import Client
from fastmcp.client.transports import StdioTransport


async def test_file_api_server():
    """mcp_server.py의 툴들을 테스트하는 메인 함수입니다."""

    # 1. 임시 테스트 디렉터리 설정
    # 테스트를 위한 격리된 환경을 만듭니다.
    val_dir = pathlib.Path("./mcp_test_workspace").resolve()
    if val_dir.exists():
        shutil.rmtree(val_dir)  # 기존에 디렉터리가 있다면 삭제합니다.
    val_dir.mkdir()  # 새 테스트 디렉터리를 생성합니다.

    # 테스트에 사용할 초기 파일 및 디렉터리를 생성합니다.
    (val_dir / "subdir").mkdir()
    (val_dir / "file1.txt").write_text("This is file 1.\nIt has two lines.")
    (val_dir / "file_to_replace.txt").write_text("Replace this content.")
    (val_dir / ".ignored_file").write_text("should be ignored")

    print(f"테스트 작업 공간 생성: {val_dir}\n")

    # StdioTransport를 사용하여 mcp_server.py 스크립트를 자식 프로세스로 실행합니다.
    # 이를 통해 클라이언트와 서버 간의 표준 입출력(stdio) 통신이 가능해집니다.
    transport = StdioTransport(
        command="python",
        args=["mcp_server.py"]  # 스크립트로 실행
    )
    # transport를 사용하여 MCP 클라이언트를 생성합니다.
    client = Client(transport)

    try:
        # 클라이언트 컨텍스트 매니저를 사용하여 서버와의 연결을 관리합니다.
        async with client:
            print("=== 파일 API 서버 테스트 시작 ===\n")

            # 서버에서 사용 가능한 툴 목록을 가져와 출력합니다.
            tools = await client.list_tools()
            print("사용 가능한 툴:")
            for tool in tools:
                print(f"  - {tool.name}: {tool.description}")
            print()

            # 1. 'list_dir' 툴 테스트
            print("1. 'list_dir' 툴 테스트 중...")
            result = await client.call_tool("list_dir", {
                "directory_path": str(val_dir),
                "ignore_patterns": [".*"]  # 숨김 파일 무시
            })
            print(f"   {len(result.data['entries'])}개의 항목을 찾았습니다:")
            for entry in result.data['entries']:
                print(
                    f"     - {entry['name']} ({'dir' if entry['is_directory'] else 'file'})"
                )
            print()
            # subdir, file1.txt, file_to_replace.txt 세 개의 항목이 있어야 합니다.
            assert len(result.data["entries"]) == 3

            # 2. 'read' 툴 테스트
            print("2. 'read' 툴 테스트 중...")
            read_path = str(val_dir / "file1.txt")
            result = await client.call_tool("read", {"file_path": read_path})
            print(f"   내용:\n{result.data['llm_content']}\n")
            assert "This is file 1" in result.data['llm_content']

            # 3. 'write' 툴 테스트
            print("3. 'write' 툴 테스트 중...")
            write_path = str(val_dir / "newly_created_file.txt")
            result = await client.call_tool("write", {"file_path": write_path, "content": "Hello from MCP!"})
            print(f"   {result.data['message']}")
            # 파일이 생성되고 내용이 올바른지 확인합니다.
            actual_content = (val_dir / "newly_created_file.txt").read_text()
            print(f"   확인된 내용: {actual_content}\n")
            assert os.path.exists(write_path)
            assert actual_content == "Hello from MCP!"

            # 4. 'replace' 툴 테스트
            print("4. 'replace' 툴 테스트 중...")
            replace_path = str(val_dir / "file_to_replace.txt")
            print(
                f"   원본 내용: {(val_dir / 'file_to_replace.txt').read_text()}")
            result = await client.call_tool("replace", {
                "file_path": replace_path,
                "old_string": "this content",
                "new_string": "the new shiny content"
            })
            print(f"   {result.data['message']}")
            # 교체가 올바르게 이루어졌는지 확인합니다.
            actual_content = (val_dir / "file_to_replace.txt").read_text()
            print(f"   새 내용: {actual_content}\n")
            assert actual_content == "Replace the new shiny content."

            print("=== 테스트 완료 ===")

    except Exception as e:
        import traceback
        print(f"오류 발생: {e}")
        traceback.print_exc()
    finally:
        # 5. 테스트 디렉터리 정리
        print("\n테스트 작업 공간 정리 중...")
        shutil.rmtree(val_dir)
        print("정리 완료.")


if __name__ == "__main__":
    # 비동기 테스트 함수를 실행합니다.
    asyncio.run(test_file_api_server())